generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//USER ========================================================================================
model User {
  id             Int     @id @default(autoincrement())
  email          String  @unique
  password       String
  role           Role    @default(USER)
  isActivated    Boolean @default(false)
  activationLink String

  refreshToken RefreshToken[]

  profile  Profile?
  cart     Cart?
  wishlist Wishlist?

  address Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id         Int     @id @default(autoincrement())
  first_name String?
  last_name  String?
  phone      String? @unique
  birthday   String?
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique
}

model Address {
  title          String
  address_line_1 String
  address_line_2 String
  country        String
  city           String
  postal_code    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model RefreshToken {
  id           Int    @id @default(autoincrement())
  refreshToken String @unique
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//CART ========================================================================================

model Cart {
  user       User          @relation(fields: [userId], references: [id])
  userId     Int           @unique
  cart_items CartProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  cart      Cart    @relation(fields: [cartId], references: [userId])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  count Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId], name: "UniqueCartItem")
}

//WISHLIST ========================================================================================

model Wishlist {
  user           User              @relation(fields: [userId], references: [id])
  userId         Int               @unique
  wishlist_items WishlistProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistProduct {
  wishlist   Wishlist @relation(fields: [wishlistId], references: [userId])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  count Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([wishlistId, productId], name: "UniqueWishlistItem")
}

//PRODUCT ========================================================================================

model Product {
  id   Int      @id @unique @default(autoincrement())
  name String
  img  String[]
  sku  String   @default("")

  price    Float
  discount Float @default(0)
  stock    Int   @default(0)

  isAvailable Boolean @default(false)

  cart_items     CartProduct[]
  wishlist_items WishlistProduct[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int

  info       ProductInfo[]
  variations ProductVariation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id        Int     @id @unique @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique
  sku       String
  price     Float
  name      String
}

model ProductInfo {
  id          Int    @id @unique @default(autoincrement())
  title       String
  description String

  product   Product @relation(fields: [productId], references: [id])
  productId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  products       Product[]
  sub_categories SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  Category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
